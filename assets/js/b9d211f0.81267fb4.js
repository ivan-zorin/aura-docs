"use strict";(self.webpackChunk_localzet_aura_docs=self.webpackChunk_localzet_aura_docs||[]).push([[6318],{5440:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"install/aura-node","title":"Aura Node","description":"Aura Node is a lightweight container with included Xray-core.","source":"@site/docs/install/aura-node.md","sourceDirName":"install","slug":"/install/aura-node","permalink":"/docs/install/aura-node","draft":false,"unlisted":false,"editUrl":"https://github.com/localzet/aura-docs/tree/main/docs/install/aura-node.md","tags":[],"version":"current","lastUpdatedBy":"Ivan Zorin","lastUpdatedAt":1750179473000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Aura Node"},"sidebar":"tutorialSidebar","previous":{"title":"Angie","permalink":"/docs/install/reverse-proxies/angie"},"next":{"title":"Subscription Page","permalink":"/docs/install/aura-subscriptions"}}');var t=r(4848),o=r(8453);const i={sidebar_position:4,title:"Aura Node"},s="Aura Node",l={},d=[{value:"Step 1 - Creating project directory",id:"step-1---creating-project-directory",level:2},{value:"Step 2 - Configure the .env file",id:"step-2---configure-the-env-file",level:2},{value:"Step 4 - Create docker-compose.yml file",id:"step-4---create-docker-composeyml-file",level:2},{value:"Step 5 - Start the containers",id:"step-5---start-the-containers",level:2},{value:"Advanced usage",id:"advanced-usage",level:2},{value:"GeoSite files",id:"geosite-files",level:3},{value:"Log from Node",id:"log-from-node",level:3},{value:"XRay SSL cert for Node",id:"xray-ssl-cert-for-node",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aura-node",children:"Aura Node"})}),"\n",(0,t.jsx)(n.p,{children:"Aura Node is a lightweight container with included Xray-core."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Aura Panel is not contains Xray-core inside, so you need to install Aura Node on a separate server in order to fully use Aura."})}),"\n",(0,t.jsx)(n.h2,{id:"step-1---creating-project-directory",children:"Step 1 - Creating project directory"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Creating project directory"',children:"mkdir /opt/auranode && cd /opt/auranode\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-2---configure-the-env-file",children:"Step 2 - Configure the .env file"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Creating .env file"',children:"nano .env\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SSL_CERT"})," can be found in the main panel under the Nodes tab, Management page, after clicking the ",(0,t.jsx)(n.strong,{children:"Create new node"})," button. ",(0,t.jsx)(n.code,{children:"APP_PORT"})," can be customized, make sure it's not being used by other services."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title=".env file content"',children:"APP_PORT=2222\r\n\r\nSSL_CERT=CERT_FROM_MAIN_PANEL\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-4---create-docker-composeyml-file",children:"Step 4 - Create docker-compose.yml file"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Creating docker-compose.yml file"',children:"nano docker-compose.yml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Paste the following content into the file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml file content"',children:"services:\r\n    auranode:\r\n        container_name: auranode\r\n        hostname: auranode\r\n        image: localzet/aura-node:latest\r\n        restart: always\r\n        network_mode: host\r\n        env_file:\r\n            - .env\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-5---start-the-containers",children:"Step 5 - Start the containers"}),"\n",(0,t.jsx)(n.p,{children:"Start the containers by running the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Start the containers"',children:"docker compose up -d && docker compose logs -f -t\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced usage"}),"\n",(0,t.jsx)(n.h3,{id:"geosite-files",children:"GeoSite files"}),"\n",(0,t.jsxs)(n.p,{children:["You can mount additional geosite files into the ",(0,t.jsx)(n.code,{children:"/usr/local/share/xray/"})," directory in the container."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Do not mount the entire folder. Otherwise, you will overwrite the default Xray geosite files. Mount each file individually."})}),"\n",(0,t.jsxs)(n.p,{children:["Add the following to the ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"services:\r\n    auranode:\r\n        container_name: auranode\r\n        hostname: auranode\r\n        image: localzet/aura-node:latest\r\n        restart: always\r\n        network_mode: host\r\n        env_file:\r\n            - .env\r\n        // highlight-next-line-green\r\n        volumes:\r\n            // highlight-next-line-green\r\n            - './zapret.dat:/usr/local/share/xray/zapret.dat'\n"})}),"\n",(0,t.jsx)(n.p,{children:"Usage in xray config:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "routing": {\r\n    "rules": [\r\n       // Other rules\r\n      {\r\n        "type": "field",\r\n        "domain": [\r\n          "ext:zapret.dat:zapret"\r\n        ],\r\n        "inboundTag": [ // Optional\r\n          "VLESS_TCP_REALITY"\r\n        ],\r\n        "outboundTag": "NOT_RU_OUTBOUND"\r\n      }\r\n      // Other rules\r\n    ]\r\n  }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"log-from-node",children:"Log from Node"}),"\n",(0,t.jsx)(n.p,{children:"You can access logs from the node by mounting them to your host's file system."}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.strong,{children:"must"})," set up log rotation, otherwise the logs will fill up your disk!"]})}),"\n",(0,t.jsxs)(n.p,{children:["Add the following to the ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"services:\r\n    auranode:\r\n        container_name: auranode\r\n        hostname: auranode\r\n        image: localzet/aura-node:latest\r\n        restart: always\r\n        network_mode: host\r\n        env_file:\r\n            - .env\r\n        // highlight-next-line-green\r\n        volumes:\r\n            // highlight-next-line-green\r\n            - '/var/log/auranode:/var/log/auranode'\n"})}),"\n",(0,t.jsx)(n.p,{children:"Usage in xray config:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "log": {\r\n      "error": "/var/log/auranode/error.log",\r\n      "access": "/var/log/auranode/access.log",\r\n      "loglevel": "warning"\r\n  }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["On the server where the node is hosted, create the folder ",(0,t.jsx)(n.code,{children:"/var/log/auranode"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir -p /var/log/auranode\n"})}),"\n",(0,t.jsx)(n.p,{children:"Install logrotate (if not already installed):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo apt update && sudo apt install logrotate\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a logrotate configuration file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nano /etc/logrotate.d/auranode\n"})}),"\n",(0,t.jsx)(n.p,{children:"Paste the following logrotate configuration for RemnaNode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/var/log/auranode/*.log {\r\n      size 50M\r\n      rotate 5\r\n      compress\r\n      missingok\r\n      notifempty\r\n      copytruncate\r\n  }\n"})}),"\n",(0,t.jsx)(n.p,{children:"Run logrotate manually to test:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"logrotate -vf /etc/logrotate.d/auranode\n"})}),"\n",(0,t.jsx)(n.h3,{id:"xray-ssl-cert-for-node",children:"XRay SSL cert for Node"}),"\n",(0,t.jsx)(n.p,{children:"If you\u2019re using certificates for your XRay configuration, you need to mount them into the panel."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Mount the folder via Docker volumes, and in the config refer to the internal path.\r\nInside the container there\u2019s a dedicated (empty) folder for certs:\r\n/var/lib/remnawave/configs/xray/ssl/"})}),"\n",(0,t.jsxs)(n.p,{children:["Add the following to the ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"aura-backend:\r\n  image: localzet/aura-backend:latest\r\n  container_name: 'remnawave'\r\n  hostname: remnawave\r\n  restart: always\r\n  ports:\r\n    - '127.0.0.1:3000:3000'\r\n  env_file:\r\n    - .env\r\n  networks:\r\n    - aura-network\r\n  // highlight-next-line-green\r\n  volumes:\r\n      // highlight-next-line-green\r\n      - '/opt/aura/nginx:/var/lib/remnawave/configs/xray/ssl'\r\n  depends_on:\r\n    aura-db:\r\n      condition: service_healthy\r\n    aura-redis:\r\n      condition: service_healthy\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"When the panel pushes the config to the node, it will automatically read the mounted files and send the certs to the node."})}),"\n",(0,t.jsx)(n.p,{children:"Usage in XRay config:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "certificates": [\r\n    {\r\n    "keyFile": "/var/lib/remnawave/configs/xray/ssl/privkey.key",\r\n    "certificateFile": "/var/lib/remnawave/configs/xray/ssl/fullchain.pem"\r\n    // Other fields\r\n    }\r\n  ]\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Pay attention to the ",(0,t.jsx)(n.strong,{children:".key"})," and ",(0,t.jsx)(n.strong,{children:".pem"})," extensions."]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var a=r(6540);const t={},o=a.createContext(t);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);